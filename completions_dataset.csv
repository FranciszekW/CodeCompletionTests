Prefix,Middle,Suffix
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private","= new Eratostenes(max);

    private.setMax(max);
}

public class Eratostenes<long>() {
    int max = 0;
    for (int i = 0; i < max; ++i) {
        if (max < i) {
            max = i;
        }
    }
}

public function minPrime(int max) {
    int prime = 0;
    for (int i = 0; i < max; ++i) {
        if (prime ==","++k) { // we jump by i crossing out all complex numbers
                    isPrime[i * i + i * k] = false;
                }
            }
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.parseInt(args[0]);
        printPrimes(max);
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(int max) {
   ","for (int i = 0; i < max; ++i) { // we jump by i crossing out all complex numbers
                for (int j = 0; j < max; ++j) { // we jump by j crossing out all complex numbers
                    if (isPrime[j * j + i * k]!= false) {
                        System.out.print(j);
                        System.out.print(' ');
                    }
                }"," k * i < max; ++k) { // we jump by i crossing out all complex numbers
                    isPrime[i * i + i * k] = false;
                }
            }
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.parseInt(args[0]);
        printPrimes(max);
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(int max) {
        boolean isPrime[] = new boolean[max];
        for (int i = 2; i < max; ++i) {
            isPrime[i] = true; // numbers bigger than 1 have a potential to be prime
        }
        for (int i = 2; i * i < max; ++i) {
           ","return isPrime[i * i + i * k];
        }
        return false;
    }
    /**
    * prints out all prime numbers greater than max
     * @param max upper bound for finding primes
     */","ll complex numbers
                    isPrime[i * i + i * k] = false;
                }
            }
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.parseInt(args[0]);
        printPrimes(max);
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrim","erations(Integer max);
    /**
     * return the number of primes in primes list
     * @param max upper bound for finding primes
     */
    private static returnPrimes(Integer max);

    /**
     * find all primes that are between max upper bound
     * @param max upper bound for finding primes
     */
    private static findPrimes(Integer max, int n) {
        char *primes[n];
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
        return primes;
    }","r (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.parseInt(args[0]);
        printPrimes(max);
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(in","f, max) {
       "," for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.parseInt(args[0]);
        printPrimes(max);
    }
}"
"global smax
global umax
; Parameters in edi, esi registers
smax:
    cmp edi, esi
    cmovl eax, e","al eax, esi ; if edi > esi then return esi, b stands for BELOW
    cmovnb eax, esi ; else esi
    ret ; result in eax
    ret ; result in esi
    ret","b eax, esi ; if edi < esi then return esi, b stands for BELOW
    cmovnb eax, edi ; else edi
    ret ; result in eax"
"global smax
global umax
; Parameters in edi, esi registers
sm","mmax:
","    cmovl eax, esi ; if edi < esi then return esi
    cmovnl eax, edi ; else edi
    ret ; result in eax
umax:
    cmp edi, esi
    cmovb eax, esi ; if edi < esi then return esi, b stands for BELOW
    cmovnb eax, edi ; else edi
    ret ; result in eax"
"global smax
global umax
; Parameters in edi, esi registers
smax:
    cmp edi, esi
    cmovl eax, esi ; if edi < esi then r","eturn 0
    cmovi eax, esi ; return esi
esi:
    cmp esi, edi ; if edi < esi then return esi","  cmovb eax, esi ; if edi < esi then return esi, b stands for BELOW
    cmovnb eax, edi ; else edi
    ret ; result in eax"
"global smax
global umax
; Parameters in edi, esi registers
smax:
    cmp edi, esi
    cmovl eax, esi ; if edi < esi then retu","n esi
    ret; r","eturn esi, b stands for BELOW
    cmovnb eax, edi ; else edi
    ret ; result in eax"
"global smax
global umax
; Parameters ","-> Smax and Umax
smax = 0; Umax = 0;
#
edi = b = 0 ;
b = 1 ;
cmovb = eax;
cmovnb = eax;
ret = 0
#
ret = c","x:
    cmp edi, esi
    cmovb eax, esi ; if edi < esi then return esi, b stands for BELOW
    cmovnb eax, edi ; else edi
    ret ; result in eax"
"global smax
global umax
; Parameters in edi, esi regi","d sujadi.
  smax ; maxima
  esi ; simpi
  osi ; oimpi
; C functions

  regi (ebx, ecx, edx, ebx, ecx, edx, edx) ;
    return regi (ebx, ecx, edx, ebx, ecx, edx, edx) ;

; Code generation

  regi a;
    ret = eax ; osi ; oimpi","    cmovnb eax, edi ; else edi
    ret ; result in eax"
"import os
import shutil
# Function to move images from raw_images to data and raise error on collisions
def move_images_with_collision_check(raw_images_dir, images_dir):
    # Iterate through each brand folder i","mages_dir
    for raw_image_file in os.listdir(raw_images_dir):
        raw_image_file_dir = os.path.join(raw_images_dir, raw_image_file)
        # Create raw image directory if it does not exist
        if","      data_brand_folder = os.path.join(images_dir, brand)"
"import os
import shutil
# Function to move images from raw_images ","to the images_dir
def move"," raise error on collisions
def move_images_with_collision_check(raw_images_dir, images_dir):
    # Iterate through each brand folder in the raw_images directory
    for brand in os.listdir(raw_images_dir):
        raw_brand_folder = os.path.join(raw_images_dir, brand)
        print(f""Moving images from: {raw_brand_folder}"")
        data_brand_folder = os.path.join(images_dir, brand)"
"import os
import shutil
# Function to move images from raw_images to data and raise error on collisions
def move_images_with_collision_c","heck(raw_images_dir, images_dir, images_name, images_type):
    # Copy images
    move_images_images","ory
    for brand in os.listdir(raw_images_dir):
        raw_brand_folder = os.path.join(raw_images_dir, brand)
        print(f""Moving images from: {raw_brand_folder}"")
        data_brand_folder = os.path.join(images_dir, brand)"
"import os
import shutil
# Function to move images from raw_images to data and raise error on collisions
def move_images_with_collision_check(raw_images_dir",# Copy images to data," images_dir):
    # Iterate through each brand folder in the raw_images directory
    for brand in os.listdir(raw_images_dir):
        raw_brand_folder = os.path.join(raw_images_dir, brand)
        print(f""Moving images from: {raw_brand_folder}"")
        data_brand_folder = os.path.join(images_dir, brand)"
"# Ensure we are dealing with directories
        if os.path.isdir(raw_brand_folder):
            # Check if the correspondin","ted folder contains the expected brand_files.
            if not all(os.path.isfile(f) for f in os.listdir(raw_brand_folder)):
                print"," in data: {data_brand_folder}"")
                os.makedirs(data_brand_folder)"
"# Ensure we are dealing with directories
        if os.path.isdir(raw_brand_folder):
            # Check if the corresponding data brand","not exist
            if not os.path.exists(brand_file):
                # Create the brand file
                print('Creating brand file...')
                brand_file = open(brand_file, 'w+')
            with",     os.makedirs(data_brand_folder)
"# Ensure we are dealing with directories
        if os.path.isdir(raw_brand_folder):
            # Check if the corres","tory exists. If not it skip the extraction.
            if not os.path.exists(data_brand_folder):
                shutil.copy(raw_brand_folder, data_"," data: {data_brand_folder}"")
                os.makedirs(data_brand_folder)"
"# Ensure we are dealing with directories
        if os.path.isdir(raw_brand_folder):
         ","print(f""Skipping: brand folder found in {raw_brand_folder}"")
            continue
        data_brand_folder = os.path.join(raw_","(f""Creating brand folder in data: {data_brand_folder}"")
                os.makedirs(data_brand_folder)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
             ","# Check if the file exists already
                if os.path.exists(filename) and filename.endswith("".png"") and filename!= ""index.html"":
                    # Load the data image and save the"," destination
                if os.path.exists(data_image_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!"")
                # Move the file to the corresponding brand folder in the data directory
                shutil.move(raw_image_path, data_image_path)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
                raw_image_path = os.path.join(raw_brand_folder, filename)
                data_image_path = os.path.join(data_","folder, filename)
                # Find the image in the raw directory and save it in a variable so that it can be displayed
                # with","ion
                if os.path.exists(data_image_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!"")
                # Move the file to the corresponding brand folder in the data directory
                shutil.move(raw_image_path, data_image_path)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
                raw_image_path = os.path.join(raw_brand_f","ile_folder, filename)
                #","name)
                data_image_path = os.path.join(data_brand_folder, filename)
                # Check if a file with the same name already exists in the destination
                if os.path.exists(data_image_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!"")
                # Move the file to the corresponding brand folder in the data directory
                shutil.move(raw_image_path, data_image_path)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdi","r(raw_brand_folder):
                # Create a new brand file
                with open(os.path.join(raw_brand_folder, filename), ""","me)
                data_image_path = os.path.join(data_brand_folder, filename)
                # Check if a file with the same name already exists in the destination
                if os.path.exists(data_image_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!"")
                # Move the file to the corresponding brand folder in the data directory
                shutil.move(raw_image_path, data_image_path)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
                raw_image_path = os.pat","h.join(raw_brand_folder, filename)
                # Check if the image file exists in the raw brand folder
                if os.path.exists(raw_image_path):
                    # Get the image data file name
                    data_image_path","if os.path.exists(data_image_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!"")
                # Move the file to the corresponding brand folder in the data directory
                shutil.move(raw_image_path, data_image_path)"
"#include <bits/stdc++.h>
using namespace std;
int przedzial(vector<int> &v, int r) // searching for such c, so that in the interval [c - r, c + r] there are the most numbers from the vector v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size()",";
    for (int i = 0; i < s; ++i)
        {
            if(v[i] + v[j] <= 0)
                v[i] = v[j];
                v[j]"," = (v[i] + v[j]) / 2;
            }
            j++;
        }
        else
        {
            i++;
        }
    }
    return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el : v)
    {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
"#include <bits/stdc++.h>
using namespace std;
int przedzial(vector<int> &v, int r) // searching for such c, so that in the interval [c - r, c + r] there are the most numbers from the vector v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size();
    int ile_wyn = 0; // how many numbers can fit int the interval ""height"" 2 * r
   ","for (int &x : v)
    {
        int i = v.size();
        int j = v.size();","    if (v[j] - v[i] <= 2 * r)
        {
            if (j - i >= ile_wyn)
            {
                ile_wyn = j - i;
                wyn = (v[i] + v[j]) / 2;
            }
            j++;
        }
        else
        {
            i++;
        }
    }
    return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el : v)
    {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
"#include <bits/stdc++.h>
using namespace std;
int przedzial(vector<int> &v, int r) // searching for such c, so that in the interval [c - r, c + r] there are the most numbers from the vector v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size();
    int ile_wyn = 0; // how many numbers can fit int the interval ""height"" 2 * r
    int wyn =","- ile_wyn;
    while (j >= r)
    {
        if(v[i]!= 0)
        {
 ","           j++;
        }
        else
        {
            i++;
        }
    }
    return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el : v)
    {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
"#include <bits/stdc++.h>
using namespace std;
int przedzial(vector<int> &v, int r) // searching for such c, so that in the interval [c - r, c + r] there are the most numbers from the vector v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size();
    int ile_wyn = 0; // how many numbers can fit int the interval ""heig","hter"";
    for (int i = 0; i < s; i++)
    {
        for (int j = 0; j < s; j++)
        {
            if (v[i] < v[j]) break;
        }
    }
    if (i >= r && j >= s) {
        return 0;
    }
    cout << przedzial(v, r);
}

int przedzial(vector<int> &v, int r) // searching for such c, so that in the interval [c - r, c + r] there are"," int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el : v)
    {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
"#include <bits/stdc++.h>
using namespace std;
int przedzial(vector<int> &v, int r) // searching for such c, so that in the interval [c - r, c + r] there are the most numbers from the vector v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size();
    int ile_wyn = 0; // how many numb","er of bitwise comparisons are we doing
    int x = 0;
    while(x < r)
    {
        x++;
        j++;
        if(x < s)
        {
            i++;
        }
        else
        {
            j++;
        }
        s++;
        if(x >= 2)
        {
            j++;
        }
        else
        {
            i++;
        }
    }
    while(x < r","n = (v[i] + v[j]) / 2;
            }
            j++;
        }
        else
        {
            i++;
        }
    }
    return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el : v)
    {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
"#include <bits/stdc++.h>
using namespace std;
int przedzial(vector<int> &v, int r) // searching for such c, so that in the interval [c - r, c + r] there are the most numbers from the vector v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size();
    int ile_wyn = 0; // how many numbers can fi","eld to i, 0 means all numbers to 0
    for (int i = 0; i < s; i++)
        sort(v.begin(), v.end());
        int j += s - 1;
        if (j == 0)
            continue;
  ","      i++;
        }
    }
    return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el : v)
    {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
"#include <bits/stdc++.h>
using namespace std;
int przedzial(vector<int> &v, int r) // searching for such c, so that in the interval [c - r, c + r] there are the most numbers from the vector v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    in","t wyn[r] == v.begin();
    wyn[r] = v.end();
    wyn[r] = v[j];
    while(i < r)
        wyn[j] = v[j + 1];
        if(i == r - 1 && wyn[j]!= v.begin())
        {
   ","     }
        else
        {
            i++;
        }
    }
    return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el : v)
    {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
