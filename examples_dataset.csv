Prefix,Middle,Suffix
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(int max) {
        boolean isPrime[] = new boolean[max];
        for (int i = 2; i < max; ++i) {
            isPrime[i] = true; // numbers","bigger than 1 have a potential to be prime
        }
        for (int i = 2; i * i < max; ++i) {
            if (isPrime[i]) {
                for (int k = 0; i * i + k * i < max; ++k) { // we jump by i crossing out all complex numbers
                    isPrime[i * i + i * k] = false;
                }
            }
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.parseInt(args[0","]);
        printPrimes(max);
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(int max) {
        boolean isPrime[] = new boolean[max];
        for (int i = 2; i < max; ++i) {
            isPrime[i] = true; // numbers bigger than 1 have a potential to be prime
        }
        for (int i = 2; i * i < max; ++i) {
            if (isPrime[i]) {
                for (int k = 0; i * i + k * i < max; ++k) { // we jump by i crossing out all complex numbers
                    isPrime[i * i + i * k] = false;
                }
 ","}
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ')",";
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.parseInt(args[0]);
        printPrimes(max);
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(int max) {
        boolean isPrime[] = new boolean[max];
        for (int i = 2; i < max; ++i) {
            isPrime[i] = true; // numbers bigger than 1 have a potential to be prime
        }
        for (int i = 2; i * i < max; ++i) {
            if (isPrime[i]) {
                for (int k = 0; i * i + k * i < max; ++k) { // we jump by i crossing out all complex numbers
                    isPrime[i * i + i * k] = false;
                }
            }
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.",parseInt(args[0]);,"
        printPrimes(max);
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(int max) {
      ","boolean isPrime[] = new boolean[max];
        for (int i = 2; i < max; ++i) {
            isPrime[i] = true; // numbers bigger than 1 have a potential to be prime
        }
        for (int i = 2; i * i < max; ++i) {
            if (isPrime[i]) {
                for (int k = 0","; i * i + k * i < max; ++k) { // we jump by i crossing out all complex numbers
                    isPrime[i * i + i * k] = false;
                }
            }
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.parseInt(args[0]);
        printPrimes(max);
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(int max) {
        boolean isPrime[] = new boolean[max];
        for (int i = 2; i < max; ++i) {
            isPrime[i] = true; // numbers bigger than 1 have a potential to be prime
        }
        for (int i = 2; i * i < max; ++i) {
            if (isPrime[i]) {
                for (int k = 0; i * i + k * i < max; ++k) { // we jump by i crossing out all complex numbers
                    isPrime[i * i + i * k] = false;
                }
            }
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int max = Integer.pars","eInt(args[0]);
        printPrimes(max);","
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(int max) {
        boolean isPrime[] = new boolean[max];
        for (int i = 2; i < max; ++i) {
            isPrime[i] = true; // numbers bigger than 1 have a potential to be prime
        }
        for (int i = 2; i * i < max; ++i) {
            if (isPrime[i]) {
                for (int k = 0; i * i + k * i < max; ++k) { // we jump by i crossing out all complex numbers
                    isPrime[i * i + i * k] = false;
                }
            }
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');","}
        }
    }
    public static void main(String[] args) {","
        int max = Integer.parseInt(args[0]);
        printPrimes(max);
    }
}"
"public class Eratostenes {
    /**
     * prints out all primes smaller than max
     * @param max upper bound for finding primes
     */
    private static void printPrimes(int max) {
        boolean isPrime[] = new boolean[max];
        for (int i = 2; i < max; ++i) {
            isPrime[i] = true; // numbers bigger than 1 have a potential to be prime
        }
        for (int i = 2; i * i < max; ++i) {
            if (isPrime[i]) {
                for (int k = 0; i * i + k * i < max; ++k) { // we jump by i crossing out all complex numbers
         ","isPrime[i * i + i * k] = false;
                }
            }
        }
        for (int i = 0; i < max; ++i) {
            if (isPrime[i]) {
                System.out.print(i);
                System.out.print(' ');
            }
        }
    }
    public static void main(String[] args) {
        int"," max = Integer.parseInt(args[0]);
        printPrimes(max);
    }
}"
"global smax
global umax
; Parameters in edi, esi registers
smax:
    cmp edi, esi
    cmovl eax, esi ; if edi < esi then return esi
    cmovnl eax, edi ; else edi
    ret ; result in eax
umax:
    cmp edi, esi
    cmovb eax, esi ; if edi < esi ","then return esi, b stands for BELOW
    cmovnb eax, edi ; else edi
    ret",; result in eax
"global smax
global umax
; Parameters in edi, esi registers
smax:
 ","cmp edi, esi
    cmovl eax, e","si ; if edi < esi then return esi
    cmovnl eax, edi ; else edi
    ret ; result in eax
umax:
    cmp edi, esi
    cmovb eax, esi ; if edi < esi then return esi, b stands for BELOW
    cmovnb eax, edi ; else edi
    ret ; result in eax"
"global smax
global umax
; Parameters in edi, esi registers
smax:
    cmp edi, esi
    cmovl eax, esi ; if edi < esi then return esi
    cmovnl eax, edi ; else edi
    ret ; result in eax
umax:
    cmp edi, esi
   ","cmovb eax,","esi ; if edi < esi then return esi, b stands for BELOW
    cmovnb eax, edi ; else edi
    ret ; result in eax"
"global smax
global umax
; Parameters in edi, esi registers
smax:
    cmp edi, esi
    cmovl eax, esi ; if edi < esi then return esi
    cmovnl eax, edi ; else edi
    ret ; result in eax
umax:
    ","cmp edi, esi
    cmovb eax, esi ; if edi < esi then return esi, b st","ands for BELOW
    cmovnb eax, edi ; else edi
    ret ; result in eax"
"global smax
global umax
; Parameters in edi, esi registers
smax:
    cmp e","di, esi
    cmovl eax, esi ; if edi < esi then return esi
    cmovnl eax, edi ; else edi
    ret ; result in eax
umax:
    cmp edi, esi
    cmovb eax, esi ; if edi < esi then return esi, b stands for BELOW
    cm","ovnb eax, edi ; else edi
    ret ; result in eax"
"global smax
global umax
; Parameters in edi, esi registers
smax:
    cmp edi, esi
    cmovl eax, esi ; if edi < esi then return esi
    cmovnl eax, edi ; else edi
    ret ; result in eax
umax:
    cmp edi, esi
    cmovb eax, esi ; if edi < esi then return esi, b stands for BELOW
    cmovnb eax, edi ; else edi",ret ; res,ult in eax
"import os
import shutil
# Function to move images from raw_images to data and raise error on collisions
def move_","images_with_collision_check(raw_images_dir, images_dir):
    # Iterate through each brand folder in the raw_images directory
    for brand in os.listdir(raw_images_dir):
        raw_brand_folder = os.path.join(","raw_images_dir, brand)
        print(f""Moving images from: {raw_brand_folder}"")
        data_brand_folder = os.path.join(images_dir, brand)"
"import os
import shutil
# Function to move images from raw_images to data and raise error on collisions
def move_images_with_collision_check(raw_images_dir, images_dir):
    # Iterate through each brand folder in the raw_images directory
    for brand in os.listdir(raw_images_dir):
        raw_brand_folder = os.path.join(raw_images_dir, brand)
        print(f""Moving images from: {raw_brand_folder}"")
        data_brand_folder = os.path.join(ima","ges_dir, brand)",
"import os
import shutil
# Function to move images from raw_images to data and raise error on collisions
def move_images_with_collision_check(raw_ima","ges_dir, images_dir):
    # Iterate through each brand folder in the raw_images directory
    for brand in os.listdir(raw_images_dir):
        raw_brand_folder = os.path.jo","in(raw_images_dir, brand)
        print(f""Moving images from: {raw_brand_folder}"")
        data_brand_folder = os.path.join(images_dir, brand)"
"import os
import shutil
# Function to move images from raw_images to data and raise error on collisions
def move_images_with_collision_check(raw_images_dir, images_dir):
    # Iterate through each brand folder in the raw_images directory
    for brand in os.listdi","r(raw_images_dir):
        raw_brand_folder = os.path.join(raw_images_dir, brand)
        print(f""Moving ima","ges from: {raw_brand_folder}"")
        data_brand_folder = os.path.join(images_dir, brand)"
"# Ensure we are dealing with directories
        if os.path.isdir(raw_brand_folder):
            # Check if the cor","responding data brand folder exists in the data directory
            if not os.path.exists(data_brand_folder):
                print(f""Creating bra","nd folder in data: {data_brand_folder}"")
                os.makedirs(data_brand_folder)"
"# Ensure we are dealing with directories
        if os.path.isdir(","raw_brand_folder):
            # Check if the corresponding data brand folder exists in the data directory
            if not os.path.exists(data_","brand_folder):
                print(f""Creating brand folder in data: {data_brand_folder}"")
                os.makedirs(data_brand_folder)"
"# Ensure we are dealing with directories
        if os.path.isdir(raw_brand_folder):
            # Check if the corresponding data b",rand folder exis,"ts in the data directory
            if not os.path.exists(data_brand_folder):
                print(f""Creating brand folder in data: {data_brand_folder}"")
                os.makedirs(data_brand_folder)"
"# Ensure we are dealing with directories
        if os.path.isdir(raw_brand_folder):
            # Check if the corresponding","data brand folder exists in the data directory
            if not os.path.exists(data_brand_folder):
                print(f""Creating brand folder in data: {data_brand_folder}"")
                os.makedirs(data",_brand_folder)
"# Ensure we are dealing with directories
        if os.path.isdir(raw_brand_folder):
            # Check if the corresponding d",ata brand folder exists in the data di,"rectory
            if not os.path.exists(data_brand_folder):
                print(f""Creating brand folder in data: {data_brand_folder}"")
                os.makedirs(data_brand_folder)"
# Ensure,"we are dealing with directories
        if os.path.isdir(raw_brand_folder):
            # Check if the corresponding data brand folder exists in the data directory
            if not os.path.exists(data_brand_folder):
                pr","int(f""Creating brand folder in data: {data_brand_folder}"")
                os.makedirs(data_brand_folder)"
"# Ensure we are dealing with directories
","if os.path.isdir(raw_brand_folder):
            # Check if the corresponding data brand folder exists in the data dir","ectory
            if not os.path.exists(data_brand_folder):
                print(f""Creating brand folder in data: {data_brand_folder}"")
                os.makedirs(data_brand_folder)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
                raw_image_path = os.path.join(raw_brand_folder,","filename)
                data_image_path = os.path.join(data_brand_folder, filename)
                # Check if a file with the same name already exists in the destination
                if os.path.exists(data_image_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!"")
                # Move the file to the corresponding brand folder in the data dir","ectory
                shutil.move(raw_image_path, data_image_path)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
                raw_image_path = os.path.join(raw_brand_folder, filename)
                data_image_path = os.path.join(data_brand_folder, fi","lename)
                # Check if a file with the same name already exists in the destination","     if os.path.exists(data_image_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!"")
                # Move the file to the corresponding brand folder in the data directory
                shutil.move(raw_image_path, data_image_path)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
                raw","_image_path = os.path.join(raw_brand_folder, filename)
                data_image_path = os.path.join(data_brand_folder, filename)
                # Check if a file with the same name already exists in the destination
                if os.path.exists(data_image_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!"")
                # Move the file to the corresponding brand folder in the data directory","   shutil.move(raw_image_path, data_image_path)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
                raw_image_path = os.path.join(raw_brand_folder, filename)
                data_image_path = os.path.join(data_brand_folder, filename)
                # Check if a file with the same name already exists in the destination
                if os.path.exists(data_ima","ge_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!"")","                # Move the file to the corresponding brand folder in the data directory
                shutil.move(raw_image_path, data_image_path)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
                raw_image_path = os.path.join(raw_brand_folder, filename)
                data_image_path = os.path.join(data_brand_folder, filename)
                # Check if a file with the same name already exists in the destination
                if os.path.exists(data_image_path):
                    raise FileExistsErro","r(f""File collision detected: {data_image_path} already exists!"")
                # Move the file to the corresponding brand f","older in the data directory
                shutil.move(raw_image_path, data_image_path)"
"# Iterate through the files in the raw brand folder
            for filename in os.listdir(raw_brand_folder):
                raw_image_path = os.path.join(raw_brand_folder, filename)
                data_image_path = os.path.join(data_brand_folder, filename)
                # Check if a file with the same name already exists in the destination
                if os.path.exists(data_image_path):
                    raise FileExistsError(f""File collision detected: {data_image_path} already exists!""",")
                # Move the file to the corresponding brand folder in the data directory","  shutil.move(raw_image_path, data_image_path)"
"#include <bits/stdc++.h>
using ",namespac,e std;
#include <bits/st,"dc++.h>
usi",ng namespace std;
"#include <bits/stdc++.h>
us",ing namespace, std;
"#include <bits/stdc++.h>
using nam",espace std,;
#include <bits/stdc++,".h>
using nam",espace std;
"#include <bits/stdc++.h>
using",namespac,e std;
#include <,"bits/stdc++.h>
using names",pace std;
#in,clude,"<bits/stdc++.h>
using namespace std;"
"int przedzial(vector<int> &v, int r) // szukamy, takiego c, ĹĽeby w przedziale [c - r, c + r] zmieĹ›ciÄ‡ jak najwiÄ™cej liczb z v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size();
    int ile_wyn = 0; // ile najwiÄ™cej liczb moĹĽe siÄ™ zmieĹ›ciÄ‡ w przedziale o ""wysokoĹ›ci"" 2 * r
    int wyn","= 0;     // szukane c
    while (j < s)
    {
        if (v[j] - v[i] <= 2 * r)
        {
            if (j - i >= ile_wyn)
            {
                ile_wyn = j - i;
                wyn = (v[i] + v[j]) / 2;
            }
            j++;
        }
        else
        {
            i++;
        }
    }
    return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el : v)
    {
        cin >> el;
    }","   cout << przedzial(v, r);
}"
"int przedzial(vector<int> &v, int r) // szukamy, takiego c, ĹĽeby w przedziale [c - r, c + r] zmieĹ›ciÄ‡ jak najwiÄ™cej liczb z v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size();
    int ile_wyn = 0; // ile najwiÄ™cej liczb moĹĽe siÄ™ zmieĹ›ciÄ‡ w przedziale o ""wysokoĹ›ci"" 2 * r
    int wyn = 0;     // szukane c
    while (j < s)
    {
        if (v[j] - v[i] <= 2 * r)
        {
            if (j - i >= ile_wyn)
            {
                ile_wyn = j - i;
                wyn = (v[i] + v[j]) / 2;
            }
       ","j++;
        }
        else
        {
            i++;
        }
    }
    return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el :","v)
    {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
"int przedzial(vector<int> &v, int r) // szukamy, takiego c, ĹĽeby w przedziale [c - r, c + r] zmieĹ›ciÄ‡ jak najwiÄ™cej liczb z v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size();
    int ile_wyn = 0; // ile najwiÄ™cej liczb moĹĽe siÄ™ zmieĹ›ciÄ‡ w przedziale o ""wysokoĹ›ci"" 2 * r
    int wyn = 0;     // szukane c
    while (j < s)
    {
        if (v[j] - v[i] <= 2 * r)
        {
            if (j - i >= ile_wyn)
            {
                ile_wyn = j - i;
                wyn = (v[i] + v[j]) / 2;
            }
            j++;
        }
        else
        {
            i++;
        }
    }
   ","return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el : v)","   {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
"int przedzial(vector<int> &v, int r) // szukamy, takiego c, ĹĽeby w przedziale [c - r, c + r] zmieĹ›ciÄ‡ jak najwiÄ™cej liczb z v
{
    sort(v.begin(), v.end());
    int i = 0;
    int j = 0;
    int s = v.size();
    int ile_wyn = 0; // ile najwiÄ™cej liczb moĹĽe siÄ™ zmieĹ›ciÄ‡ w przedziale o ""wysokoĹ›ci"" 2 * r
    int wyn = 0;     // szukane c
    while (j < s)
    {
        if (v[j] - v[i] <= 2 * r)
        {
            if ","(j - i >= ile_wyn)
            {
                ile_wyn = j - i;
                wyn = (v[i] + v[j]) / 2;
            }
            j++;
        }
        else
        {
            i++;
        }
    }
    return wyn;
}
int main()
{
    int n, r;
    cin >> n >> r;
    vector<int> v(n);
    for (int &el"," : v)
    {
        cin >> el;
    }
    cout << przedzial(v, r);
}"
